{"version":3,"sources":["index.js"],"names":["DEFAULTS","BASE_TEN","FAILOVER_ERROR_CODES","HTTP_ERROR_CODE_RETRY_THRESHHOLD","HTTP_ERROR_CODE_THRESHHOLD","HTTP_PORT","HTTPS_PORT","MAX_REDIRECT_COUNT","MAX_RETRY_COUNT","TIMEOUT","EVENTS","error","redirect","request","response","retry","HTTP_HEADERS","CONNECTION","CONTENT_LENGTH","CONTENT_TYPE","HOST","LOCATION","HTTP_STATUS_CODES","NO_CONTENT","PROXY_REQUIRED","REDIRECT_CODE_PERM","REDIRECT_CODE_TEMP","REDIRECT_NEW_CODE_PERM","REDIRECT_NEW_CODE_TEMP","RE_CHARSET","RE_CONTENT_TYPE_JSON","RE_CONTENT_TYPE_TEXT","RE_ENDS_WITH_S","RE_PROTOCOL_SEPARATOR","RE_TLS_PROTOCOL","RE_URL_PARAMETERS","SUPPORTED_REQUEST_OPTIONS","coalesce","args","value","isEmpty","ensureOptions","isObject","URL","headerExists","headers","name","toLowerCase","length","result","toString","test","mergeOptions","options","option","maxRedirectCount","maxRetryCount","timeout","query","squareBracketNotation","param","join","Date","toISOString","path","qs","stringify","parseUrlPattern","urlPattern","parts","match","parameters","split","parameter","push","regEx","RegExp","buldSerializedQueryParam","document","serializedKey","key","resultQuery","Request","data","callback","executeRequest","requestContentType","self","state","failover","index","values","redirects","tries","Buffer","isBuffer","byteLength","field","hostname","portIndex","port","substr","isNaN","protocol","host","proxy","secure","pathname","resolve","reject","clientRequest","emit","client","https","http","chunks","contentType","json","code","statusCode","err","Error","location","redirectUrl","search","previousRequestProtocol","context","stream","contentParts","setEncoding","ex","on","chunk","body","JSON","parse","setTimeout","abort","write","end","then","method","call","events","EventEmitter","Resource","urlParts","post","get","put","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IACCA,QAAQ,GAAG;AACVC,EAAAA,QAAQ,EAAG,EADD;AAEVC,EAAAA,oBAAoB,EAAG,CACtB,cADsB,EAEtB,YAFsB,EAGtB,WAHsB,CAFb;AAOVC,EAAAA,gCAAgC,EAAG,GAPzB;AAQVC,EAAAA,0BAA0B,EAAG,GARnB;AASVC,EAAAA,SAAS,EAAG,EATF;AAUVC,EAAAA,UAAU,EAAG,GAVH;AAWVC,EAAAA,kBAAkB,EAAG,CAXX;AAYVC,EAAAA,eAAe,EAAG,CAZR;AAaVC,EAAAA,OAAO,EAAG;AAbA,CADZ;AAAA,IAgBCC,MAAM,GAAG;AACRC,EAAAA,KAAK,EAAG,OADA;AAERC,EAAAA,QAAQ,EAAG,UAFH;AAGRC,EAAAA,OAAO,EAAE,SAHD;AAIRC,EAAAA,QAAQ,EAAG,UAJH;AAKRC,EAAAA,KAAK,EAAG;AALA,CAhBV;AAAA,IAuBCC,YAAY,GAAG;AACdC,EAAAA,UAAU,EAAG,YADC;AAEdC,EAAAA,cAAc,EAAG,gBAFH;AAGdC,EAAAA,YAAY,EAAG,cAHD;AAIdC,EAAAA,IAAI,EAAG,MAJO;AAKdC,EAAAA,QAAQ,EAAG;AALG,CAvBhB;AAAA,IA8BC;AACAC,iBAAiB,GAAG;AACnBC,EAAAA,UAAU,EAAG,GADM;AAEnBC,EAAAA,cAAc,EAAG,GAFE;AAGnBC,EAAAA,kBAAkB,EAAG,GAHF;AAInBC,EAAAA,kBAAkB,EAAG,GAJF;AAKnBC,EAAAA,sBAAsB,EAAG,GALN;AAMnBC,EAAAA,sBAAsB,EAAG;AANN,CA/BrB;AAAA,IAuCCC,UAAU,GAAG,yBAvCd;AAAA,IAwCCC,oBAAoB,GAAG,OAxCxB;AAAA,IAyCCC,oBAAoB,GAAG,8BAzCxB;AAAA,IA0CCC,cAAc,GAAG,KA1ClB;AAAA,IA2CCC,qBAAqB,GAAG,OA3CzB;AAAA,IA4CCC,eAAe,GAAG,YA5CnB;AAAA,IA6CCC,iBAAiB,GAAG,8BA7CrB;AAAA,IA8CCC,yBAAyB,GAAG,CAC3B,OAD2B,EAE3B,MAF2B,EAG3B,QAH2B,EAI3B,SAJ2B,EAK3B,MAL2B,EAM3B,UAN2B,EAO3B,OAP2B,EAOlB;AACT,WAR2B,EAQd;AACb;AACA;AACA,cAX2B,EAY3B,kBAZ2B,EAYP;AACpB,eAb2B,EAaV;AACjB,QAd2B,EAe3B,MAf2B,EAgB3B,UAhB2B,EAiB3B,MAjB2B,EAkB3B,UAlB2B,EAkBf;AACZ,OAnB2B,EAmBlB;AACT,OApB2B,EAoBlB;AACT,oBArB2B,EAsB3B,YAtB2B,EAuB3B,SAvB2B,CA9C7B;;AAwEA,SAASC,QAAT,GAA4B;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC3B,SAAO,wBAAAA,IAAI,MAAJ,CAAAA,IAAI,EAAQ,UAACC,KAAD;AAAA,WAAW,CAACC,OAAO,CAACD,KAAD,CAAnB;AAAA,GAAR,CAAJ,CAAwC,CAAxC,CAAP;AACA;;AAED,SAASE,aAAT,CAAwBF,KAAxB,EAA+B;AAC9B,MAAI,CAACG,QAAQ,CAACH,KAAD,CAAT,IAAoB,OAAOA,KAAP,KAAiB,QAAzC,EAAmD;AAClD,WAAO,IAAII,QAAJ,CAAQJ,KAAR,CAAP;AACA;;AAED,SAAOA,KAAP;AACA;;AAED,SAASK,YAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AACrC,SAAO,CAACN,OAAO,CAACK,OAAO,CAACC,IAAD,CAAR,CAAR,IAA2B,CAACN,OAAO,CAACK,OAAO,CAACC,IAAI,CAACC,WAAL,EAAD,CAAR,CAA1C;AACA;;AAED,SAASP,OAAT,CAAkBD,KAAlB,EAAyB;AAAA;;AACxB,SAAQA,KAAK,KAAK,IAAV,IAAkB,kCACzB,OAAOA,KAAP,KAAiB,WADQ,EAEzB,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAACS,MAFX,EAGzB,yBAAcT,KAAd,KAAwB,CAACA,KAAK,CAACS,MAHN,EAIzBN,QAAQ,CAACH,KAAD,CAAR,IAAmB,CAAC,sBAAYA,KAAZ,EAAmBS,MAJd,kBAKnB,UAACC,MAAD;AAAA,WAAYA,MAAZ;AAAA,GALmB,CAA1B;AAMA;;AAED,SAASP,QAAT,CAAmBH,KAAnB,EAA0B;AAAA;;AACzB,SAAO,CAAC,mCACPA,KAAK,KAAK,IADH,EAEP,OAAOA,KAAP,KAAiB,WAFV,EAGP,yBAAOA,KAAP,MAAiB,QAHV,EAIP,yBAAcA,KAAd,CAJO,EAKPA,KAAK,IAAIA,KAAK,CAACW,QAAf,IAA2B,CAAE,uBAAuBC,IAAvB,CAA4BZ,KAAK,CAACW,QAAN,EAA5B,CALtB,mBAMD,UAACD,MAAD;AAAA,WAAYA,MAAZ;AAAA,GANC,CAAR;AAOA;;AAED,SAASG,YAAT,CAAuBvC,OAAvB,EAA8C;AAAA,MAAdwC,OAAc,uEAAJ,EAAI;AAC7C,MAAIJ,MAAM,GAAG,EAAb,CAD6C,CAG7C;;AACApC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACwC,OAAR,GAAkBxC,OAAO,CAACwC,OAAR,IAAmB,EAArC;AAEA,2BAAAjB,yBAAyB,MAAzB,CAAAA,yBAAyB,EAAS,UAACkB,MAAD,EAAY;AAC7C,QAAIf,KAAK,GAAGF,QAAQ,CAACgB,OAAO,CAACC,MAAD,CAAR,EAAkBzC,OAAO,CAACwC,OAAR,CAAgBC,MAAhB,CAAlB,CAApB;;AAEA,QAAI,CAACd,OAAO,CAACD,KAAD,CAAZ,EAAqB;AACpBU,MAAAA,MAAM,CAACK,MAAD,CAAN,GAAiBf,KAAjB;AACA;AACD,GANwB,CAAzB,CAP6C,CAe7C;AAEA;;AACAU,EAAAA,MAAM,CAACM,gBAAP,GAA0BlB,QAAQ,CACjCY,MAAM,CAACM,gBAD0B,EAEjCvD,QAAQ,CAACO,kBAFwB,CAAlC,CAlB6C,CAsB7C;;AACA0C,EAAAA,MAAM,CAACO,aAAP,GAAuBnB,QAAQ,CAC9BY,MAAM,CAACO,aADuB,EAE9BxD,QAAQ,CAACQ,eAFqB,CAA/B,CAvB6C,CA2B7C;;AACAyC,EAAAA,MAAM,CAACQ,OAAP,GAAiBpB,QAAQ,CACxBY,MAAM,CAACQ,OADiB,EAExBzD,QAAQ,CAACS,OAFe,CAAzB,CA5B6C,CAgC7C;;AACA,MAAI,CAAC+B,OAAO,CAACS,MAAM,CAACS,KAAR,CAAZ,EAA4B;AAAA;;AAC3B;AACAT,IAAAA,MAAM,CAACS,KAAP,GAAeC,qBAAqB,CAACV,MAAM,CAACS,KAAR,CAApC,CAF2B,CAI3B;;AACA,+DAAYT,MAAM,CAACS,KAAnB,mBAAkC,UAACE,KAAD,EAAW;AAC5C;AACA,UAAI,yBAAcX,MAAM,CAACS,KAAP,CAAaE,KAAb,CAAd,KAAsCX,MAAM,CAACS,KAAP,CAAaE,KAAb,EAAoBZ,MAApB,GAA6B,CAAvE,EAA0E;AACzEC,QAAAA,MAAM,CAACS,KAAP,CAAaE,KAAb,IAAsBX,MAAM,CAACS,KAAP,CAAaE,KAAb,EAAoBC,IAApB,CAAyB,GAAzB,CAAtB;AACA;AACA,OAL2C,CAO5C;;;AACA,UAAIZ,MAAM,CAACS,KAAP,CAAaE,KAAb,aAA+BE,IAAnC,EAAyC;AACxCb,QAAAA,MAAM,CAACS,KAAP,CAAaE,KAAb,IAAsBX,MAAM,CAACS,KAAP,CAAaE,KAAb,EAAoBG,WAApB,EAAtB;AACA;AACA;AACD,KAZD,EAL2B,CAmB3B;;AACAd,IAAAA,MAAM,CAACe,IAAP,GAAc,CACbf,MAAM,CAACe,IADM,EAEbC,wBAAGC,SAAH,CAAajB,MAAM,CAACS,KAApB,CAFa,EAEeG,IAFf,CAEoB,GAFpB,CAAd;AAGA;;AAED,SAAOZ,MAAP;AACA;;AAED,SAASkB,eAAT,CAA0BC,UAA1B,EAAsC;AAAA;;AACrC,MAAIC,KAAK,GAAG,IAAI1B,QAAJ,CAAQyB,UAAR,CAAZ,CADqC,CAGrC;;AACA,uCAAAC,KAAK,CAACL,IAAN,CACEM,KADF,CACQnC,iBADR,EAEC;AAFD,oBAGU,UAACmC,KAAD,EAAW;AAAA;;AACnB,QAAIC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAYrC,iBAAZ,CAAjB;;AACA,QAAI,CAACoC,UAAU,CAACvB,MAAhB,EAAwB;AACvB;AACA,KAJkB,CAMnB;;;AACAqB,IAAAA,KAAK,CAACE,UAAN,GAAmBF,KAAK,CAACE,UAAN,IAAoB,EAAvC,CAPmB,CASnB;;AACA,iEAAAA,UAAU,MAAV,CAAAA,UAAU,EACD,UAACE,SAAD;AAAA,aAAe,CAACjC,OAAO,CAACiC,SAAD,CAAvB;AAAA,KADC,CAAV,kBAEU,UAACA,SAAD,EAAe;AACvB;AACA,UAAI,CAAC,MAAMtB,IAAN,CAAWsB,SAAX,CAAL,EAA4B;AAC3BJ,QAAAA,KAAK,CAACE,UAAN,CAAiBG,IAAjB,CAAsB;AACrB5B,UAAAA,IAAI,EAAG2B,SADc;AAErBE,UAAAA,KAAK,EAAG,IAAIC,MAAJ,YAAgBH,SAAhB;AAFa,SAAtB;AAIA;AACD,KAVF;AAWA,GAxBF;AA0BA,SAAOJ,KAAP;AACA;;AAED,SAASV,qBAAT,CAAgCD,KAAhC,EAAuC;AACtC,MAAIlB,OAAO,CAACkB,KAAD,CAAX,EAAoB;AACnB,WAAOA,KAAP;AACA;;AAED,MACCmB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,QAAD;AAAA;;AAAA,QAAWC,aAAX,uEAA2B,EAA3B;AAAA,WAAkC,2DACtDD,QADsD,mBAEnD,UAACE,GAAD,EAAS;AAAA;;AACjB,UAAIxC,OAAO,CAACsC,QAAQ,CAACE,GAAD,CAAT,CAAX,EAA4B;AAC3B;AACA;;AAED,UAAI,CAACtC,QAAQ,CAACoC,QAAQ,CAACE,GAAD,CAAT,CAAb,EAA8B;AAAA;;AAC7BC,QAAAA,WAAW,CAACF,aAAa,iDAAMA,aAAN,wBAAuBC,GAAvB,SAAgCA,GAA9C,CAAX,GAAgEF,QAAQ,CAACE,GAAD,CAAxE;AACA;AACA;;AAED,aAAOH,wBAAwB,CAC9BC,QAAQ,CAACE,GAAD,CADsB,EAE9BD,aAAa,iDAAMA,aAAN,wBAAuBC,GAAvB,SAAgCA,GAFf,CAA/B;AAGA,KAf2D,CAAlC;AAAA,GAD5B;AAAA,MAiBCC,WAAW,GAAG,EAjBf,CALsC,CAwBtC;;;AACAJ,EAAAA,wBAAwB,CAACnB,KAAD,CAAxB;AAEA,SAAOuB,WAAP;AACA;;IAEKC,O;;;;;AACL,mBAAa7B,OAAb,EAAsB;AAAA;;AAAA;AACrB;;AAEA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAChC,YAAKA,OAAL,GAAe,IAAIV,QAAJ,CAAQU,OAAR,CAAf;AACA,KAFD,MAEO;AACN,YAAKA,OAAL,GAAeA,OAAf;AACA;;AAPoB;AAQrB;;;;WAED,cAAMA,OAAN,EAAe8B,IAAf,EAAqBC,QAArB,EAA+B;AAAA;;AAC9B,UACCC,cADD;AAAA,UAECC,kBAFD;AAAA,UAGCC,IAAI,GAAG,IAHR;AAAA,UAICC,KAAK,GAAG,EAJT;;AAMA,UAAI,OAAOL,IAAP,KAAgB,UAApB,EAAgC;AAC/BC,QAAAA,QAAQ,GAAGD,IAAX;AACAA,QAAAA,IAAI,GAAG,EAAP;AACA;;AAED,UAAI,OAAO9B,OAAP,KAAmB,UAAvB,EAAmC;AAClC+B,QAAAA,QAAQ,GAAG/B,OAAX;AACA8B,QAAAA,IAAI,GAAG,EAAP;AACA9B,QAAAA,OAAO,GAAG,EAAV;AACA,OAhB6B,CAkB9B;;;AACAmC,MAAAA,KAAK,CAACL,IAAN,GAAaA,IAAI,IAAI,EAArB;AACAK,MAAAA,KAAK,CAACC,QAAN,GAAiB;AAChBC,QAAAA,KAAK,EAAG,CADQ;AAEhBC,QAAAA,MAAM,EAAG;AAFO,OAAjB;AAIAH,MAAAA,KAAK,CAACI,SAAN,GAAkBJ,KAAK,CAACI,SAAN,IAAmB,EAArC;AACAJ,MAAAA,KAAK,CAACK,KAAN,GAAcL,KAAK,CAACK,KAAN,IAAe,CAA7B,CAzB8B,CA2B9B;;AACAxC,MAAAA,OAAO,GAAGD,YAAY,CAAC,IAAD,EAAOC,OAAP,CAAtB;AACAA,MAAAA,OAAO,CAACR,OAAR,GAAkBQ,OAAO,CAACR,OAAR,IAAmB,EAArC,CA7B8B,CA+B9B;;AACAyC,MAAAA,kBAAkB,GAAGjD,QAAQ,CAC5BgB,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACG,YAA7B,CAD4B,EAE5BkC,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACG,YAAb,CAA0B4B,WAA1B,EAAhB,CAF4B,CAA7B,CAhC8B,CAoC9B;;AACA,UAAI,CAACuC,kBAAL,EAAyB;AACxB;AACAjC,QAAAA,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACG,YAA7B,IAA6C,kBAA7C;AACAmE,QAAAA,kBAAkB,GAAG,kBAArB;AACA,OAzC6B,CA2C9B;;;AACA,UAAI,OAAOE,KAAK,CAACL,IAAb,KAAsB,QAAtB,IAAkC,CAACW,MAAM,CAACC,QAAP,CAAgBP,KAAK,CAACL,IAAtB,CAAvC,EAAoE;AACnE,YAAIrD,oBAAoB,CAACqB,IAArB,CAA0BmC,kBAA1B,CAAJ,EAAmD;AAClDE,UAAAA,KAAK,CAACL,IAAN,GAAa,2BAAeA,IAAf,CAAb;AACA,SAFD,MAEO,IAAIA,IAAI,IAAIA,IAAI,CAACjC,QAAb,IAAyB,OAAOiC,IAAI,CAACjC,QAAZ,KAAyB,UAAtD,EAAkE;AACxEsC,UAAAA,KAAK,CAACL,IAAN,GAAaA,IAAI,CAACjC,QAAL,EAAb;AACA,SALkE,CAOnE;;AACA,OApD6B,CAsD9B;;;AACA,UAAI,OAAOsC,KAAK,CAACL,IAAb,KAAsB,QAA1B,EAAoC;AACnC9B,QAAAA,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACE,cAA7B,IACCmC,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACE,cAA7B,KACA4E,MAAM,CAACE,UAAP,CAAkBR,KAAK,CAACL,IAAxB,CAFD;AAGA;;AAED,UAAIW,MAAM,CAACC,QAAP,CAAgBP,KAAK,CAACL,IAAtB,CAAJ,EAAiC;AAChC9B,QAAAA,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACE,cAA7B,IACCmC,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACE,cAA7B,KACAsE,KAAK,CAACL,IAAN,CAAWnC,MAFZ;AAGA,OAjE6B,CAmE9B;;;AACA,4CAAC,MAAD,EAAS,UAAT,EAAqB,WAArB,EAAkC,OAAlC,mBAAmD,UAACiD,KAAD,EAAW;AAC7D,YAAIjB,GAAG,GAAGhD,cAAc,CAACmB,IAAf,CAAoB8C,KAApB,IACT,uBAAAA,KAAK,MAAL,CAAAA,KAAK,EAAO,CAAP,EAAU,CAAC,CAAX,CADI,GAETA,KAFD,CAD6D,CAK7D;AACA;;AACA,YAAI,yBAAc5C,OAAO,CAAC4C,KAAD,CAArB,CAAJ,EAAmC;AAAA;;AAClCT,UAAAA,KAAK,CAACC,QAAN,CAAeE,MAAf,GAAwB,6DAAAH,KAAK,CAACC,QAAN,oBACf,kCAAApC,OAAO,CAAC4C,KAAD,CAAP,mBAAmB,UAAC1D,KAAD;AAAA,mBAAY;AAAEyC,cAAAA,GAAG,EAAHA,GAAF;AAAOzC,cAAAA,KAAK,EAALA;AAAP,aAAZ;AAAA,WAAnB,CADe,CAAxB,CADkC,CAIlC;;AACA,iBAAOc,OAAO,CAAC4C,KAAD,CAAd;AACA;AACD,OAdD,EApE8B,CAoF9B;;AACA,UAAI,wBAAAT,KAAK,CAACC,QAAN,EAAsBzC,MAA1B,EAAkC;AACjCK,QAAAA,OAAO,CAAC,wBAAAmC,KAAK,CAACC,QAAN,EAAsBD,KAAK,CAACC,QAAN,CAAeC,KAArC,EAA4CV,GAA7C,CAAP,GACC,wBAAAQ,KAAK,CAACC,QAAN,EAAsBD,KAAK,CAACC,QAAN,CAAeC,KAArC,EAA4CnD,KAD7C;AAEA,OAxF6B,CA0F9B;;;AACA,UAAI,CAACC,OAAO,CAACa,OAAO,CAAC6C,QAAT,CAAZ,EAAgC;AAAA;;AAC/B,YAAIC,SAAS,GAAG,sCAAA9C,OAAO,CAAC6C,QAAR,mBAAyB,GAAzB,CAAhB;;AAEA,YAAIC,SAAS,GAAG,CAAhB,EAAmB;AAClB;AACA9C,UAAAA,OAAO,CAAC+C,IAAR,GAAe,2BACd/D,QAAQ,CAACgB,OAAO,CAAC+C,IAAT,EAAe/C,OAAO,CAAC6C,QAAR,CAAiBG,MAAjB,CAAwBF,SAAS,GAAG,CAApC,CAAf,CADM,EAEdnG,QAAQ,CAACC,QAFK,CAAf,CAFkB,CAMlB;;AACA,cAAIqG,KAAK,CAACjD,OAAO,CAAC+C,IAAT,CAAT,EAAyB;AACxB/C,YAAAA,OAAO,CAAC+C,IAAR,GAAelE,eAAe,CAACiB,IAAhB,CAAqBE,OAAO,CAACkD,QAA7B,IACdvG,QAAQ,CAACM,UADK,GAEdN,QAAQ,CAACM,UAFV;AAIA+C,YAAAA,OAAO,CAAC6C,QAAR,GAAmB,CAClB7C,OAAO,CAAC6C,QAAR,CAAiBG,MAAjB,CAAwB,CAAxB,EAA2BF,SAA3B,CADkB,EAElB9C,OAAO,CAAC+C,IAFU,EAEJvC,IAFI,CAEC,GAFD,CAAnB;AAGA;;AAEDR,UAAAA,OAAO,CAACmD,IAAR,GAAenD,OAAO,CAAC6C,QAAvB;AACA7C,UAAAA,OAAO,CAAC6C,QAAR,GAAmB7C,OAAO,CAAC6C,QAAR,CAAiBG,MAAjB,CAAwB,CAAxB,EAA2BF,SAA3B,CAAnB;AACA;AACD,OAlH6B,CAoH9B;;;AACA,UAAI,CAAC3D,OAAO,CAACa,OAAO,CAACoD,KAAT,CAAZ,EAA6B;AAAA;;AAC5B,YACCD,IAAI,GAAGnD,OAAO,CAACmD,IAAR,IAAgBnD,OAAO,CAAC6C,QADhC;AAAA,YAECO,KAAK,GAAG,IAAI9D,QAAJ,CAAQU,OAAO,CAACoD,KAAhB,CAFT,CAD4B,CAK5B;;AACApD,QAAAA,OAAO,CAACR,OAAR,CAAgB7B,YAAY,CAACI,IAA7B,IAAqCoF,IAArC,CAN4B,CAQ5B;;AACA,YAAI,sCAAAnD,OAAO,CAACW,IAAR,mBAAqBwC,IAArB,IAA6B,CAAjC,EAAoC;AAAA;;AACnC,cAAInD,OAAO,CAAC+C,IAAR,IAAgB,uCAACpG,QAAQ,CAACK,SAAV,EAAqBL,QAAQ,CAACM,UAA9B,oBAAkD+C,OAAO,CAAC+C,IAA1D,IAAkE,CAAtF,EAAyF;AACxFI,YAAAA,IAAI,GAAG,CAACA,IAAD,EAAOnD,OAAO,CAAC+C,IAAf,EAAqBvC,IAArB,CAA0B,GAA1B,CAAP;AACA;;AAEDR,UAAAA,OAAO,CAACW,IAAR,GAAe,CACdX,OAAO,CAACqD,MAAR,GAAiB,OAAjB,GAA2B,MADb,EAEd1C,iBAAKH,IAAL,CAAU2C,IAAV,EAAgBnD,OAAO,CAACW,IAAxB,CAFc,EAEiBH,IAFjB,CAEsB,KAFtB,CAAf;AAGA,SAjB2B,CAmB5B;;;AACAR,QAAAA,OAAO,CAACmD,IAAR,GAAeC,KAAK,CAACD,IAArB;AACAnD,QAAAA,OAAO,CAAC6C,QAAR,GAAmBO,KAAK,CAACP,QAAzB;AACA7C,QAAAA,OAAO,CAAC+C,IAAR,GAAeK,KAAK,CAACL,IAArB;AACA/C,QAAAA,OAAO,CAACkD,QAAR,GAAmBE,KAAK,CAACF,QAAzB;AACA,OA7I6B,CA+I9B;;AACA;AACF;AACA;AACA;AACA;AAEE;;;AACAlD,MAAAA,OAAO,CAACW,IAAR,GAAeX,OAAO,CAACW,IAAR,IAAgBX,OAAO,CAACsD,QAAvC;AAEAtB,MAAAA,cAAc,GAAG,wBAAY,UAACuB,OAAD,EAAUC,MAAV,EAAqB;AACjD,YAAIC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACzB;AACAvB,UAAAA,IAAI,CAACwB,IAAL,CAAUrG,MAAM,CAACG,OAAjB,EAA0B;AACzBwC,YAAAA,OAAO,EAAPA,OADyB;AAEzBmC,YAAAA,KAAK,EAALA;AAFyB,WAA1B;AAKA,cAAIwB,MAAM,GAAG,CAAC9E,eAAe,CAACiB,IAAhB,CAAqBE,OAAO,CAACkD,QAA7B,IAAyCU,iBAAzC,GAAiDC,gBAAlD,EAAwDrG,OAAxD,CACZwC,OADY,EAEZ,UAACvC,QAAD,EAAc;AAAA;;AACb,gBACCqG,MAAM,GAAG,EADV;AAAA,gBAECC,WAAW,GAAG/E,QAAQ,CACrBvB,QAAQ,CAAC+B,OAAT,CAAiB7B,YAAY,CAACG,YAA9B,CADqB,EAErBL,QAAQ,CAAC+B,OAAT,CAAiB7B,YAAY,CAACG,YAAb,CAA0B4B,WAA1B,EAAjB,CAFqB,CAFvB;AAAA,gBAKCsE,IAAI,GAAGvF,oBAAoB,CAACqB,IAArB,CAA0BiE,WAA1B,CALR;AAAA,gBAMCxG,QAAQ,GAAG,oCACVU,iBAAiB,CAACG,kBADR,EAEVH,iBAAiB,CAACI,kBAFR,EAGVJ,iBAAiB,CAACK,sBAHR,EAIVL,iBAAiB,CAACM,sBAJR,oBAKJ,UAAC0F,IAAD;AAAA,qBAAWA,IAAI,KAAKxG,QAAQ,CAACyG,UAA7B;AAAA,aALI,CANZ,CADa,CAcb;;AACA/B,YAAAA,KAAK,CAAC3C,OAAN,GAAgB/B,QAAQ,CAAC+B,OAAzB;AACA2C,YAAAA,KAAK,CAAC+B,UAAN,GAAmBzG,QAAQ,CAACyG,UAA5B,CAhBa,CAkBb;;AACAhC,YAAAA,IAAI,CAACwB,IAAL,CAAUrG,MAAM,CAACI,QAAjB,EAA2B;AAC1BuC,cAAAA,OAAO,EAAPA,OAD0B;AAE1BmC,cAAAA,KAAK,EAALA;AAF0B,aAA3B,EAnBa,CAwBb;;AACA,gBAAIA,KAAK,CAAC+B,UAAN,KAAqBjG,iBAAiB,CAACE,cAA3C,EAA2D;AAC1D,kBAAIgG,GAAG,GAAG,IAAIC,KAAJ,CAAU,gBAAV,CAAV;AACAD,cAAAA,GAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,cAAAA,GAAG,CAAChC,KAAJ,GAAYA,KAAZ;AAEA,qBAAOqB,MAAM,CAACW,GAAD,CAAb;AACA,aA/BY,CAiCb;;;AACA,gBAAI5G,QAAJ,EAAc;AACb,kBAAI,CAACgC,YAAY,CAAC4C,KAAK,CAAC3C,OAAP,EAAgB7B,YAAY,CAACK,QAA7B,CAAjB,EAAyD;AACxD,oBAAImG,IAAG,GAAG,IAAIC,KAAJ,CAAU,qCAAV,CAAV;;AACAD,gBAAAA,IAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,gBAAAA,IAAG,CAAChC,KAAJ,GAAYA,KAAZ;AAEA,uBAAOqB,MAAM,CAACW,IAAD,CAAb;AACA;;AAED,kBAAIhC,KAAK,CAACI,SAAN,CAAgB5C,MAAhB,IAA0BK,OAAO,CAACE,gBAAtC,EAAwD;AACvD,oBAAIiE,KAAG,GAAG,IAAIC,KAAJ,CAAU,iCAAV,CAAV;;AACAD,gBAAAA,KAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,gBAAAA,KAAG,CAAChC,KAAJ,GAAYA,KAAZ;AAEA,uBAAOqB,MAAM,CAACW,KAAD,CAAb;AACA;;AAED,kBACCE,QAAQ,GAAGrF,QAAQ,CAClBvB,QAAQ,CAAC+B,OAAT,CAAiB7B,YAAY,CAACK,QAA9B,CADkB,EAElBP,QAAQ,CAAC+B,OAAT,CAAiB7B,YAAY,CAACK,QAAb,CAAsB0B,WAAtB,EAAjB,CAFkB,CADpB;AAAA,kBAIC4E,WAJD,CAjBa,CAuBb;;AACA,kBAAI,CAACD,QAAQ,CAACE,MAAT,CAAgB3F,qBAAhB,CAAL,EAA6C;AAC5C,oBAAI4F,uBAAuB,GAAGrC,KAAK,CAACI,SAAN,CAAgB5C,MAAhB,GAC7BwC,KAAK,CAACI,SAAN,CAAgBJ,KAAK,CAACI,SAAN,CAAgB5C,MAAhB,GAAyB,CAAzC,EAA4CuD,QADf,GAE7BlD,OAAO,CAACkD,QAFT;AAIAmB,gBAAAA,QAAQ,GAAG,CAACG,uBAAD,EAA0BH,QAA1B,EAAoC7D,IAApC,CAAyC,EAAzC,CAAX;AACA,eA9BY,CAgCb;;;AACA8D,cAAAA,WAAW,GAAG,IAAIhF,QAAJ,CAAQ+E,QAAR,CAAd,CAjCa,CAmCb;;AACAC,cAAAA,WAAW,CAAC3D,IAAZ,GAAmB2D,WAAW,CAAC3D,IAAZ,IAAoB2D,WAAW,CAAChB,QAAnD,CApCa,CAsCb;;AACA,sCAActD,OAAd,EAAuBsE,WAAvB,EAvCa,CAyCb;;AACAnC,cAAAA,KAAK,CAACI,SAAN,CAAgBlB,IAAhB,CAAqBiD,WAArB,EA1Ca,CA4Cb;;AACApC,cAAAA,IAAI,CAACwB,IAAL,CAAUrG,MAAM,CAACE,QAAjB,EAA2B;AAC1ByC,gBAAAA,OAAO,EAAPA,OAD0B;AAE1BmC,gBAAAA,KAAK,EAALA;AAF0B,eAA3B,EA7Ca,CAkDb;;AACA,qBAAO,+BAAasB,aAAb,CAAP;AACA,aAtFY,CAwFb;AACA;;;AACA,gBAAIM,WAAW,IAAI,CAACrF,oBAAoB,CAACoB,IAArB,CAA0BiE,WAA1B,CAApB,EAA4D;AAC3D,kBAAIU,OAAO,CAACP,UAAR,IAAsBvH,QAAQ,CAACI,0BAAnC,EAA+D;AAC9D,oBAAIoH,KAAG,GAAG,IAAIC,KAAJ,CAAU,gDAAV,CAAV;;AACAD,gBAAAA,KAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,gBAAAA,KAAG,CAAChC,KAAJ,GAAYA,KAAZ;AACAgC,gBAAAA,KAAG,CAACO,MAAJ,GAAajH,QAAb;AAEA,uBAAO+F,MAAM,CAACW,KAAD,CAAb;AACA;;AAED,qBAAOZ,OAAO,CAAC9F,QAAD,CAAd;AACA,aArGY,CAuGb;;;AACA,gBAAI,CAAC0B,OAAO,CAAC4E,WAAD,CAAZ,EAA2B;AAC1B,kBAAIY,YAAY,GAAGZ,WAAW,CAAC5C,KAAZ,CAAkB3C,UAAlB,CAAnB,CAD0B,CAG1B;;AACA,kBAAImG,YAAY,CAAChF,MAAb,GAAsB,CAA1B,EAA6B;AAC5B,oBAAI;AACHlC,kBAAAA,QAAQ,CAACmH,WAAT,CAAqBD,YAAY,CAACA,YAAY,CAAChF,MAAb,GAAsB,CAAvB,CAAjC;AACA,iBAFD,CAEE,OAAOkF,EAAP,EAAW,CACZ;AACA;AACD;AACD;;AAEDpH,YAAAA,QAAQ,CAACqH,EAAT,CAAY,MAAZ,EAAoB,UAACC,KAAD;AAAA,qBAAWjB,MAAM,CAACzC,IAAP,CAAY0D,KAAZ,CAAX;AAAA,aAApB;AAEAtH,YAAAA,QAAQ,CAACqH,EAAT,CAAY,KAAZ,EAAmB,YAAM;AACxB,kBACCE,IAAI,GAAGlB,MAAM,CAACtD,IAAP,CAAY,EAAZ,CADR;AAAA,kBAEClD,KAAK,GAAG6E,KAAK,CAAC+B,UAAN,IAAoBvH,QAAQ,CAACI,0BAFtC;AAAA,kBAGCW,KAAK,GACJyE,KAAK,CAAC+B,UAAN,IAAoBvH,QAAQ,CAACG,gCAA7B,IACAqF,KAAK,CAACK,KAAN,IAAexC,OAAO,CAACG,aALzB;AAAA,kBAMC+D,UAAU,GAAGzG,QAAQ,CAACyG,UANvB;;AAQA,kBAAIF,IAAI,IAAIE,UAAU,KAAKjG,iBAAiB,CAACC,UAAzC,IAAuD8G,IAAI,CAACrF,MAAhE,EAAwE;AACvE,oBAAI;AACHqF,kBAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACA,iBAFD,CAEE,OAAOH,EAAP,EAAW;AACZ,sBAAIV,KAAG,GAAG,IAAIC,KAAJ,CAAU,oCAAV,CAAV;;AACAD,kBAAAA,KAAG,CAACa,IAAJ,GAAWA,IAAX;AACAb,kBAAAA,KAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,kBAAAA,KAAG,CAAChC,KAAJ,GAAYA,KAAZ;AAEA,yBAAOqB,MAAM,CAACW,KAAD,CAAb;AACA;AACD,eApBuB,CAsBxB;;;AACA,kBAAIzG,KAAJ,EAAW;AACV;AACAwE,gBAAAA,IAAI,CAACwB,IAAL,CAAUrG,MAAM,CAACK,KAAjB,EAAwB;AACvBsH,kBAAAA,IAAI,EAAJA,IADuB;AAEvBhF,kBAAAA,OAAO,EAAPA,OAFuB;AAGvBmC,kBAAAA,KAAK,EAALA;AAHuB,iBAAxB,EAFU,CAQV;;AACAA,gBAAAA,KAAK,CAACK,KAAN,IAAe,CAAf;AAEA,uBAAOiB,aAAa,EAApB;AACA;;AAED,kBAAInG,KAAJ,EAAW;AACV,oBAAI6G,KAAG,GAAG,IAAIC,KAAJ,CAAU,qBAAV,CAAV;;AACAD,gBAAAA,KAAG,CAACa,IAAJ,GAAWA,IAAX;AACAb,gBAAAA,KAAG,CAACnE,OAAJ,GAAcA,OAAd;AACAmE,gBAAAA,KAAG,CAAChC,KAAJ,GAAYA,KAAZ;AACAgC,gBAAAA,KAAG,CAACD,UAAJ,GAAiBA,UAAjB;AAEA,uBAAOV,MAAM,CAACW,KAAD,CAAb;AACA;;AAED,qBAAOZ,OAAO,CAACyB,IAAD,CAAd;AACA,aAhDD;AAiDA,WA1KW,CAAb;AA4KArB,UAAAA,MAAM,CAACmB,EAAP,CAAUzH,MAAM,CAACC,KAAjB,EAAwB,UAAC6G,GAAD,EAAS;AAAA;;AAChC,gBAAI/B,QAAQ,GACX,wBAAAD,KAAK,CAACC,QAAN,EAAsBzC,MAAtB,IACAwE,GAAG,CAACF,IADJ,IAEA,sCAAAtH,QAAQ,CAACE,oBAAT,mBAAsCsH,GAAG,CAACF,IAA1C,MAAoD,CAAC,CAHtD,CADgC,CAMhC;;AACA,gBAAI7B,QAAJ,EAAc;AACbD,cAAAA,KAAK,CAACK,KAAN,IAAe,CAAf;AACAL,cAAAA,KAAK,CAACC,QAAN,CAAeC,KAAf,GACCF,KAAK,CAACC,QAAN,CAAeC,KAAf,KAAyB,wBAAAF,KAAK,CAACC,QAAN,EAAsBzC,MAAtB,GAA+B,CAAxD,GACC,CADD,GAECwC,KAAK,CAACC,QAAN,CAAeC,KAAf,GAAuB,CAHzB;;AAKA,kBAAIF,KAAK,CAACK,KAAN,IAAe,wBAAAL,KAAK,CAACC,QAAN,EAAsBzC,MAAzC,EAAiD;AAChD;AACA,uBAAOK,OAAO,CAAC6C,QAAf;AACA,uBAAO7C,OAAO,CAACmD,IAAf;AAEAnD,gBAAAA,OAAO,CAAC,wBAAAmC,KAAK,CAACC,QAAN,EAAsBD,KAAK,CAACC,QAAN,CAAeC,KAArC,EAA4CV,GAA7C,CAAP,GACC,wBAAAQ,KAAK,CAACC,QAAN,EAAsBD,KAAK,CAACC,QAAN,CAAeC,KAArC,EAA4CnD,KAD7C;AAGA,uBAAO,+BAAauE,aAAb,CAAP;AACA;AACD,aAxB+B,CA0BhC;;;AACA,gBAAItB,KAAK,CAACK,KAAN,IAAexC,OAAO,CAACG,aAA3B,EAA0C;AACzCgC,cAAAA,KAAK,CAACK,KAAN,IAAe,CAAf;AACA,qBAAO,+BAAaiB,aAAb,CAAP;AACA;;AAED,mBAAOD,MAAM,CAACW,GAAD,CAAb;AACA,WAjCD,EAnLyB,CAsNzB;;AACA,cAAInE,OAAO,CAACI,OAAZ,EAAqB;AACpB;AACA,gBAAI,OAAOJ,OAAO,CAACI,OAAf,KAA2B,QAA/B,EAAyC;AACxCJ,cAAAA,OAAO,CAACI,OAAR,GAAkB,2BAASJ,OAAO,CAACI,OAAjB,EAA0BzD,QAAQ,CAACC,QAAnC,CAAlB;AACA;;AAED+G,YAAAA,MAAM,CAACwB,UAAP,CAAkBnF,OAAO,CAACI,OAA1B,EAAmCuD,MAAM,CAACyB,KAA1C;AACA,WA9NwB,CAgOzB;;;AACA,cAAIjD,KAAK,CAACL,IAAN,KAAe,OAAOK,KAAK,CAACL,IAAb,KAAsB,QAAtB,IAAkCW,MAAM,CAACC,QAAP,CAAgBP,KAAK,CAACL,IAAtB,CAAjD,CAAJ,EAAmF;AAClF6B,YAAAA,MAAM,CAAC0B,KAAP,CAAalD,KAAK,CAACL,IAAnB;AACA,WAnOwB,CAqOzB;;;AACA6B,UAAAA,MAAM,CAAC2B,GAAP;AACA,SAvOD;;AAyOA7B,QAAAA,aAAa;AACb,OA3OgB,CAAjB,CAzJ8B,CAsY9B;;AACA,UAAItE,OAAO,CAAC4C,QAAD,CAAX,EAAuB;AACtB,eAAOC,cAAP;AACA,OAzY6B,CA2Y9B;;;AACA,aAAOA,cAAc,CACnBuD,IADK,CACA,UAAC3F,MAAD;AAAA,eAAYmC,QAAQ,CAAC,IAAD,EAAOnC,MAAP,CAApB;AAAA,OADA,WAECmC,QAFD,CAAP;AAGA;;;WAED,sBAA0B;AAAA,UAAd/B,OAAc,uEAAJ,EAAI;AACzB,aAAOD,YAAY,CAAC,IAAD,EAAOC,OAAP,CAAnB;AACA,K,CAED;;;;;mGACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcA,gBAAAA,OAAd,2DAAwB,EAAxB;AAA4B+B,gBAAAA,QAA5B;;AACC,oBAAI,OAAO/B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,QAAjB;AAPD;AAAA,uBAQc,KAAKC,IAAL,CAAUzF,OAAV,EAAmB+B,QAAnB,CARd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAWA;;;;;+FACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAW/B,gBAAAA,OAAX,8DAAqB,EAArB;AAAyB+B,gBAAAA,QAAzB;;AACC,oBAAI,OAAO/B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,KAAjB;AAPD;AAAA,uBAQc,KAAKC,IAAL,CAAUzF,OAAV,EAAmB+B,QAAnB,CARd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAWA;;;;;gGACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAY/B,gBAAAA,OAAZ,8DAAsB,EAAtB;AAA0B+B,gBAAAA,QAA1B;;AACC,oBAAI,OAAO/B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,MAAjB;AAPD;AAAA,uBAQc,KAAKC,IAAL,CAAUzF,OAAV,EAAmB+B,QAAnB,CARd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAWA;;;;;iGACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAa/B,gBAAAA,OAAb,8DAAuB,EAAvB;AAA2B8B,gBAAAA,IAA3B;AAAiCC,gBAAAA,QAAjC;;AACC,oBAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B3C,OAAO,CAAC4C,QAAD,CAAzC,EAAqD;AACpDA,kBAAAA,QAAQ,GAAGD,IAAX;AACAA,kBAAAA,IAAI,GAAG,IAAP;AACA;;AAED,oBAAI,OAAO9B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,OAAjB;AAZD;AAAA,uBAac,KAAKC,IAAL,CAAUzF,OAAV,EAAmB8B,IAAnB,EAAyBC,QAAzB,CAbd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAgBA;;;;;gGACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAY/B,gBAAAA,OAAZ,8DAAsB,EAAtB;AAA0B8B,gBAAAA,IAA1B;AAAgCC,gBAAAA,QAAhC;;AACC,oBAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B3C,OAAO,CAAC4C,QAAD,CAAzC,EAAqD;AACpDA,kBAAAA,QAAQ,GAAGD,IAAX;AACAA,kBAAAA,IAAI,GAAG,IAAP;AACA;;AAED,oBAAI,OAAO9B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,MAAjB;AAZD;AAAA,uBAac,KAAKC,IAAL,CAAUzF,OAAV,EAAmB8B,IAAnB,EAAyBC,QAAzB,CAbd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAgBA;;;;;+FACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAW/B,gBAAAA,OAAX,8DAAqB,EAArB;AAAyB8B,gBAAAA,IAAzB;AAA+BC,gBAAAA,QAA/B;;AACC,oBAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B3C,OAAO,CAAC4C,QAAD,CAAzC,EAAqD;AACpDA,kBAAAA,QAAQ,GAAGD,IAAX;AACAA,kBAAAA,IAAI,GAAG,IAAP;AACA;;AAED,oBAAI,OAAO9B,OAAP,KAAmB,UAAnB,IAAiCb,OAAO,CAAC4C,QAAD,CAA5C,EAAwD;AACvDA,kBAAAA,QAAQ,GAAG/B,OAAX;AACAA,kBAAAA,OAAO,GAAG,EAAV;AACA;;AAEDA,gBAAAA,OAAO,GAAGZ,aAAa,CAACY,OAAD,CAAvB;AACAA,gBAAAA,OAAO,CAACwF,MAAR,GAAiB,KAAjB;AAZD;AAAA,uBAac,KAAKC,IAAL,CAAUzF,OAAV,EAAmB8B,IAAnB,EAAyBC,QAAzB,CAbd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;EAveqB2D,mBAAOC,Y;;IAwfvBC,Q;AACL,oBAAa7E,UAAb,EAAyBf,OAAzB,EAAkC;AAAA;;AACjC,QAAIb,OAAO,CAAC4B,UAAD,CAAX,EAAyB;AACxB,YAAM,IAAIqD,KAAJ,CAAU,iCAAV,CAAN;AACA;;AAED,SAAK5G,OAAL,GAAe,IAAIqE,OAAJ,CAAY7B,OAAZ,CAAf;AACA,SAAK6F,QAAL,GAAgB/E,eAAe,CAACC,UAAD,CAA/B;AACA;;;;;kGAED,kBAAce,IAAd,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACK/B,gBAAAA,OADL,GACe,KAAK6F,QADpB;AAAA;AAAA,uBAGc,KAAKrI,OAAL,CAAasI,IAAb,CAAkB9F,OAAlB,EAA2B8B,IAA3B,EAAiCC,QAAjC,CAHd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mGAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAiB9C,IAAjB;AAAiBA,kBAAAA,IAAjB;AAAA;;AAEE8C,gBAAAA,QAFF,GAEa9C,IAAI,IAAI,OAAOA,IAAI,CAACA,IAAI,CAACU,MAAL,GAAc,CAAf,CAAX,KAAiC,UAAzC,GACVV,IAAI,CAACA,IAAI,CAACU,MAAL,GAAc,CAAf,CADM,GAEVoC,QAJH,EAKE/B,OALF,GAKY,KAAK6F,QALjB,EAOC;;AACA7F,gBAAAA,OAAO,CAACK,KAAR,GAAgBpB,IAAhB;AARD;AAAA,uBAUc,KAAKzB,OAAL,WAAoBwC,OAApB,EAA6B+B,QAA7B,CAVd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oGAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAmB9C,IAAnB;AAAmBA,kBAAAA,IAAnB;AAAA;;AAEE8C,gBAAAA,QAFF,GAEa9C,IAAI,IAAI,OAAOA,IAAI,CAACA,IAAI,CAACU,MAAL,GAAc,CAAf,CAAX,KAAiC,UAAzC,GACVV,IAAI,CAACA,IAAI,CAACU,MAAL,GAAc,CAAf,CADM,GAEVoC,QAJH,EAKE/B,OALF,GAKY,KAAK6F,QALjB,EAOC;;AACA7F,gBAAAA,OAAO,CAACK,KAAR,GAAgBpB,IAAhB;AARD;AAAA,uBAUc,KAAKzB,OAAL,CAAauI,GAAb,CAAiB/F,OAAjB,EAA0B+B,QAA1B,CAVd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kGAaA,mBAAcD,IAAd,EAAoBC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACK/B,gBAAAA,OADL,GACe,KAAK6F,QADpB;AAAA;AAAA,uBAGc,KAAKrI,OAAL,CAAawI,GAAb,CAAiBhG,OAAjB,EAA0B8B,IAA1B,EAAgCC,QAAhC,CAHd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;AAODkE,MAAM,CAACC,OAAP,GAAiB;AAAErE,EAAAA,OAAO,EAAPA,OAAF;AAAW+D,EAAAA,QAAQ,EAARA;AAAX,CAAjB","sourcesContent":["import events from 'events';\nimport http from 'http';\nimport https from 'https';\nimport path from 'path';\nimport qs from 'querystring';\nimport { URL } from 'url';\n\nconst\n\tDEFAULTS = {\n\t\tBASE_TEN : 10,\n\t\tFAILOVER_ERROR_CODES : [\n\t\t\t'ECONNREFUSED',\n\t\t\t'ECONNRESET',\n\t\t\t'ENOTFOUND'\n\t\t],\n\t\tHTTP_ERROR_CODE_RETRY_THRESHHOLD : 500,\n\t\tHTTP_ERROR_CODE_THRESHHOLD : 400,\n\t\tHTTP_PORT : 80,\n\t\tHTTPS_PORT : 443,\n\t\tMAX_REDIRECT_COUNT : 5,\n\t\tMAX_RETRY_COUNT : 3,\n\t\tTIMEOUT : 60000\n\t},\n\tEVENTS = {\n\t\terror : 'error',\n\t\tredirect : 'redirect',\n\t\trequest :'request',\n\t\tresponse : 'response',\n\t\tretry : 'retry'\n\t},\n\tHTTP_HEADERS = {\n\t\tCONNECTION : 'Connection',\n\t\tCONTENT_LENGTH : 'Content-Length',\n\t\tCONTENT_TYPE : 'Content-Type',\n\t\tHOST : 'Host',\n\t\tLOCATION : 'Location'\n\t},\n\t// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\n\tHTTP_STATUS_CODES = {\n\t\tNO_CONTENT : 204,\n\t\tPROXY_REQUIRED : 305,\n\t\tREDIRECT_CODE_PERM : 301,\n\t\tREDIRECT_CODE_TEMP : 302,\n\t\tREDIRECT_NEW_CODE_PERM : 308,\n\t\tREDIRECT_NEW_CODE_TEMP : 307\n\t},\n\tRE_CHARSET = /\\ charset\\=(a-z\\-0-9)*/i,\n\tRE_CONTENT_TYPE_JSON = /json/i,\n\tRE_CONTENT_TYPE_TEXT = /json|xml|yaml|html|text|jwt/i,\n\tRE_ENDS_WITH_S = /s$/i,\n\tRE_PROTOCOL_SEPARATOR = /\\/{2}/,\n\tRE_TLS_PROTOCOL = /^https\\:?/i,\n\tRE_URL_PARAMETERS = /(\\/\\:([a-z0-9\\_\\-\\~\\.]*))*/gi,\n\tSUPPORTED_REQUEST_OPTIONS = [\n\t\t'agent',\n\t\t'auth',\n\t\t'family',\n\t\t'headers',\n\t\t'host',\n\t\t'hostname',\n\t\t'hosts', // custom\n\t\t'hostnames', // custom\n\t\t// 'keepAlive', // custom\n\t\t// 'keepAliveMsecs', // custom\n\t\t'localAddress',\n\t\t'maxRedirectCount', // custom\n\t\t'maxRetryCount', // custom\n\t\t'method',\n\t\t'path',\n\t\t'pathname',\n\t\t'port',\n\t\t'protocol', // use to determine HTTPS or HTTP\n\t\t'proxy', // added in v1.0.9\n\t\t'query', // custom\n\t\t'rejectUnauthorized',\n\t\t'socketPath',\n\t\t'timeout'\n\t];\n\nfunction coalesce (...args) {\n\treturn args.filter((value) => !isEmpty(value))[0];\n}\n\nfunction ensureOptions (value) {\n\tif (!isObject(value) && typeof value === 'string') {\n\t\treturn new URL(value);\n\t}\n\n\treturn value;\n}\n\nfunction headerExists (headers, name) {\n\treturn !isEmpty(headers[name]) || !isEmpty(headers[name.toLowerCase()]);\n}\n\nfunction isEmpty (value) {\n\treturn (value === null || [\n\t\ttypeof value === 'undefined',\n\t\ttypeof value === 'string' && !value.length,\n\t\tArray.isArray(value) && !value.length,\n\t\tisObject(value) && !Object.keys(value).length\n\t].some((result) => result));\n}\n\nfunction isObject (value) {\n\treturn ![\n\t\tvalue === null,\n\t\ttypeof value === 'undefined',\n\t\ttypeof value !== 'object',\n\t\tArray.isArray(value),\n\t\tvalue && value.toString && !(/^\\[object\\sObject\\]$/.test(value.toString()))\n\t].some((result) => result);\n}\n\nfunction mergeOptions (request, options = {}) {\n\tlet result = {};\n\n\t// ensure request options exist\n\trequest = request || {};\n\trequest.options = request.options || {};\n\n\tSUPPORTED_REQUEST_OPTIONS.forEach((option) => {\n\t\tlet value = coalesce(options[option], request.options[option]);\n\n\t\tif (!isEmpty(value)) {\n\t\t\tresult[option] = value;\n\t\t}\n\t});\n\n\t// TODO: apply keep-alive\n\n\t// apply redirect\n\tresult.maxRedirectCount = coalesce(\n\t\tresult.maxRedirectCount,\n\t\tDEFAULTS.MAX_REDIRECT_COUNT);\n\n\t// apply retry\n\tresult.maxRetryCount = coalesce(\n\t\tresult.maxRetryCount,\n\t\tDEFAULTS.MAX_RETRY_COUNT);\n\n\t// apply timeout\n\tresult.timeout = coalesce(\n\t\tresult.timeout,\n\t\tDEFAULTS.TIMEOUT);\n\n\t// validate the query\n\tif (!isEmpty(result.query)) {\n\t\t// format objects using square-bracket notation\n\t\tresult.query = squareBracketNotation(result.query);\n\n\t\t// serialization adjustments for querystring\n\t\tObject.keys(result.query).forEach((param) => {\n\t\t\t// ensure arrays in querystring are properly serialized...\n\t\t\tif (Array.isArray(result.query[param]) && result.query[param].length > 1) {\n\t\t\t\tresult.query[param] = result.query[param].join(',');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// turn date objects into ISO strings\n\t\t\tif (result.query[param] instanceof Date) {\n\t\t\t\tresult.query[param] = result.query[param].toISOString();\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\t// ensure the path is properly set\n\t\tresult.path = [\n\t\t\tresult.path,\n\t\t\tqs.stringify(result.query)].join('?');\n\t}\n\n\treturn result;\n}\n\nfunction parseUrlPattern (urlPattern) {\n\tlet parts = new URL(urlPattern);\n\n\t// determine parameters within the URL (if applicable)\n\tparts.path\n\t\t.match(RE_URL_PARAMETERS)\n\t\t// .filter((match) => RE_URL_PARAMETERS.test(match))\n\t\t.forEach((match) => {\n\t\t\tlet parameters = match.split(RE_URL_PARAMETERS);\n\t\t\tif (!parameters.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ensure parameters exist on the response\n\t\t\tparts.parameters = parts.parameters || [];\n\n\t\t\t// iterate each match\n\t\t\tparameters\n\t\t\t\t.filter((parameter) => !isEmpty(parameter))\n\t\t\t\t.forEach((parameter) => {\n\t\t\t\t\t// isolate the parameters from the URL\n\t\t\t\t\tif (!/^\\//.test(parameter)) {\n\t\t\t\t\t\tparts.parameters.push({\n\t\t\t\t\t\t\tname : parameter,\n\t\t\t\t\t\t\tregEx : new RegExp(`\\:${parameter}`)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\treturn parts;\n}\n\nfunction squareBracketNotation (query) {\n\tif (isEmpty(query)) {\n\t\treturn query;\n\t}\n\n\tlet\n\t\tbuldSerializedQueryParam = (document, serializedKey = '') => Object\n\t\t\t.keys(document)\n\t\t\t.forEach((key) => {\n\t\t\t\tif (isEmpty(document[key])) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isObject(document[key])) {\n\t\t\t\t\tresultQuery[serializedKey ? `${serializedKey}[${key}]` : key] = document[key];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn buldSerializedQueryParam(\n\t\t\t\t\tdocument[key],\n\t\t\t\t\tserializedKey ? `${serializedKey}[${key}]` : key);\n\t\t\t}),\n\t\tresultQuery = {};\n\n\t// kick off the serialization\n\tbuldSerializedQueryParam(query);\n\n\treturn resultQuery;\n}\n\nclass Request extends events.EventEmitter {\n\tconstructor (options) {\n\t\tsuper();\n\n\t\tif (typeof options === 'string') {\n\t\t\tthis.options = new URL(options);\n\t\t} else {\n\t\t\tthis.options = options;\n\t\t}\n\t}\n\n\tcall (options, data, callback) {\n\t\tlet\n\t\t\texecuteRequest,\n\t\t\trequestContentType,\n\t\t\tself = this,\n\t\t\tstate = {};\n\n\t\tif (typeof data === 'function') {\n\t\t\tcallback = data;\n\t\t\tdata = '';\n\t\t}\n\n\t\tif (typeof options === 'function') {\n\t\t\tcallback = options;\n\t\t\tdata = '';\n\t\t\toptions = {};\n\t\t}\n\n\t\t// ensure default values for state\n\t\tstate.data = data || '';\n\t\tstate.failover = {\n\t\t\tindex : 0,\n\t\t\tvalues : []\n\t\t};\n\t\tstate.redirects = state.redirects || [];\n\t\tstate.tries = state.tries || 1;\n\n\t\t// ensure default values for all request options\n\t\toptions = mergeOptions(this, options);\n\t\toptions.headers = options.headers || {};\n\n\t\t// check to see if content-type is specified\n\t\trequestContentType = coalesce(\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE],\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE.toLowerCase()]);\n\n\t\t// default the content type if not provided...\n\t\tif (!requestContentType) {\n\t\t\t// apply application/json header as default (this is opinionated)\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE] = 'application/json';\n\t\t\trequestContentType = 'application/json';\n\t\t}\n\n\t\t// ensure serialization of data\n\t\tif (typeof state.data !== 'string' && !Buffer.isBuffer(state.data)) {\n\t\t\tif (RE_CONTENT_TYPE_JSON.test(requestContentType)) {\n\t\t\t\tstate.data = JSON.stringify(data);\n\t\t\t} else if (data && data.toString && typeof data.toString === 'function') {\n\t\t\t\tstate.data = data.toString();\n\t\t\t}\n\n\t\t\t// TODO: handle when state.data might not be a string or Buffer\n\t\t}\n\n\t\t// apply content length header\n\t\tif (typeof state.data === 'string') {\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] =\n\t\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] ||\n\t\t\t\tBuffer.byteLength(state.data);\n\t\t}\n\n\t\tif (Buffer.isBuffer(state.data)) {\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] =\n\t\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] ||\n\t\t\t\tstate.data.length;\n\t\t}\n\n\t\t// setup failover if applicable\n\t\t['host', 'hostname', 'hostnames', 'hosts'].forEach((field) => {\n\t\t\tlet key = RE_ENDS_WITH_S.test(field) ?\n\t\t\t\tfield.slice(0, -1) :\n\t\t\t\tfield;\n\n\t\t\t// if the host or hostname field value is an Array\n\t\t\t// map the values into the state.failover\n\t\t\tif (Array.isArray(options[field])) {\n\t\t\t\tstate.failover.values = state.failover.values\n\t\t\t\t\t.concat(options[field].map((value) => ({ key, value })));\n\n\t\t\t\t// clear the failover settings from the options as it will be overridden\n\t\t\t\tdelete options[field];\n\t\t\t}\n\t\t});\n\n\t\t// set the current default host/hostname if failover options are present\n\t\tif (state.failover.values.length) {\n\t\t\toptions[state.failover.values[state.failover.index].key] =\n\t\t\t\tstate.failover.values[state.failover.index].value;\n\t\t}\n\n\t\t// correct for port in the hostname field...\n\t\tif (!isEmpty(options.hostname)) {\n\t\t\tlet portIndex = options.hostname.indexOf(':');\n\n\t\t\tif (portIndex > 0) {\n\t\t\t\t// set port, host and hostname correctly\n\t\t\t\toptions.port = parseInt(\n\t\t\t\t\tcoalesce(options.port, options.hostname.substr(portIndex + 1)),\n\t\t\t\t\tDEFAULTS.BASE_TEN);\n\n\t\t\t\t// correct port if invalid value is provided\n\t\t\t\tif (isNaN(options.port)) {\n\t\t\t\t\toptions.port = RE_TLS_PROTOCOL.test(options.protocol) ?\n\t\t\t\t\t\tDEFAULTS.HTTPS_PORT :\n\t\t\t\t\t\tDEFAULTS.HTTPS_PORT;\n\n\t\t\t\t\toptions.hostname = [\n\t\t\t\t\t\toptions.hostname.substr(0, portIndex),\n\t\t\t\t\t\toptions.port].join(':');\n\t\t\t\t}\n\n\t\t\t\toptions.host = options.hostname;\n\t\t\t\toptions.hostname = options.hostname.substr(0, portIndex);\n\t\t\t}\n\t\t}\n\n\t\t// apply proxy server options when specified\n\t\tif (!isEmpty(options.proxy)) {\n\t\t\tlet\n\t\t\t\thost = options.host || options.hostname,\n\t\t\t\tproxy = new URL(options.proxy);\n\n\t\t\t// set Host header value to destination server for web proxy request\n\t\t\toptions.headers[HTTP_HEADERS.HOST] = host;\n\n\t\t\t// ensure the path property includes the full destination URL (with port of provided)\n\t\t\tif (options.path.indexOf(host) < 0) {\n\t\t\t\tif (options.port && [DEFAULTS.HTTP_PORT, DEFAULTS.HTTPS_PORT].indexOf(options.port) < 0) {\n\t\t\t\t\thost = [host, options.port].join(':');\n\t\t\t\t}\n\n\t\t\t\toptions.path = [\n\t\t\t\t\toptions.secure ? 'https' : 'http',\n\t\t\t\t\tpath.join(host, options.path)].join('://');\n\t\t\t}\n\n\t\t\t// Set host, hostname, port and protocol for request to web proxy server\n\t\t\toptions.host = proxy.host;\n\t\t\toptions.hostname = proxy.hostname;\n\t\t\toptions.port = proxy.port;\n\t\t\toptions.protocol = proxy.protocol;\n\t\t}\n\n\t\t// apply keep-alive header when specified\n\t\t/*\n\t\tif (options.keepAlive && !headerExists(options.headers, HTTP_HEADERS.CONNECTION)) {\n\t\t\toptions.headers[HTTP_HEADERS.CONNECTION] = 'keep-alive';\n\t\t}\n\t\t//*/\n\n\t\t// ensure path is set\n\t\toptions.path = options.path || options.pathname;\n\n\t\texecuteRequest = new Promise((resolve, reject) => {\n\t\t\tlet clientRequest = () => {\n\t\t\t\t// emit request event\n\t\t\t\tself.emit(EVENTS.request, {\n\t\t\t\t\toptions,\n\t\t\t\t\tstate\n\t\t\t\t});\n\n\t\t\t\tlet client = (RE_TLS_PROTOCOL.test(options.protocol) ? https : http).request(\n\t\t\t\t\toptions,\n\t\t\t\t\t(response) => {\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tchunks = [],\n\t\t\t\t\t\t\tcontentType = coalesce(\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.CONTENT_TYPE],\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.CONTENT_TYPE.toLowerCase()]),\n\t\t\t\t\t\t\tjson = RE_CONTENT_TYPE_JSON.test(contentType),\n\t\t\t\t\t\t\tredirect = [\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_CODE_PERM,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_CODE_TEMP,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_NEW_CODE_PERM,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_NEW_CODE_TEMP\n\t\t\t\t\t\t\t].some((code) => (code === response.statusCode));\n\n\t\t\t\t\t\t// track response headers and status\n\t\t\t\t\t\tstate.headers = response.headers;\n\t\t\t\t\t\tstate.statusCode = response.statusCode;\n\n\t\t\t\t\t\t// emit response event\n\t\t\t\t\t\tself.emit(EVENTS.response, {\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// determine if a proxy server is required...\n\t\t\t\t\t\tif (state.statusCode === HTTP_STATUS_CODES.PROXY_REQUIRED) {\n\t\t\t\t\t\t\tlet err = new Error('proxy required');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// determine if a redirect has been detected\n\t\t\t\t\t\tif (redirect) {\n\t\t\t\t\t\t\tif (!headerExists(state.headers, HTTP_HEADERS.LOCATION)) {\n\t\t\t\t\t\t\t\tlet err = new Error('redirect requested with no location');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (state.redirects.length >= options.maxRedirectCount) {\n\t\t\t\t\t\t\t\tlet err = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet\n\t\t\t\t\t\t\t\tlocation = coalesce(\n\t\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.LOCATION],\n\t\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.LOCATION.toLowerCase()]),\n\t\t\t\t\t\t\t\tredirectUrl;\n\n\t\t\t\t\t\t\t// set protocol when missing (i.e. location begins with '//' instead of protocol)\n\t\t\t\t\t\t\tif (!location.search(RE_PROTOCOL_SEPARATOR)) {\n\t\t\t\t\t\t\t\tlet previousRequestProtocol = state.redirects.length ?\n\t\t\t\t\t\t\t\t\tstate.redirects[state.redirects.length - 1].protocol :\n\t\t\t\t\t\t\t\t\toptions.protocol;\n\n\t\t\t\t\t\t\t\tlocation = [previousRequestProtocol, location].join('');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// read location from headers\n\t\t\t\t\t\t\tredirectUrl = new URL(location);\n\n\t\t\t\t\t\t\t// ensure path is set\n\t\t\t\t\t\t\tredirectUrl.path = redirectUrl.path || redirectUrl.pathname;\n\n\t\t\t\t\t\t\t// remap options for next request\n\t\t\t\t\t\t\tObject.assign(options, redirectUrl);\n\n\t\t\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\t\t\tstate.redirects.push(redirectUrl);\n\n\t\t\t\t\t\t\t// emit redirect event\n\t\t\t\t\t\t\tself.emit(EVENTS.redirect, {\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// utilize content-type to understand if response should be a stream\n\t\t\t\t\t\t// assume missing content-type header indicates text value\n\t\t\t\t\t\tif (contentType && !RE_CONTENT_TYPE_TEXT.test(contentType)) {\n\t\t\t\t\t\t\tif (context.statusCode >= DEFAULTS.HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\t\tlet err = new Error('HTTP error received for streaming Content-Type');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\t\t\t\t\t\t\t\terr.stream = response;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn resolve(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle the response encoding...\n\t\t\t\t\t\tif (!isEmpty(contentType)) {\n\t\t\t\t\t\t\tlet contentParts = contentType.split(RE_CHARSET);\n\n\t\t\t\t\t\t\t// if a charset was specified, apply it\n\t\t\t\t\t\t\tif (contentParts.length > 1) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresponse.setEncoding(contentParts[contentParts.length - 1]);\n\t\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t\t// TODO: handle warning...\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse.on('data', (chunk) => chunks.push(chunk));\n\n\t\t\t\t\t\tresponse.on('end', () => {\n\t\t\t\t\t\t\tlet\n\t\t\t\t\t\t\t\tbody = chunks.join(''),\n\t\t\t\t\t\t\t\terror = state.statusCode >= DEFAULTS.HTTP_ERROR_CODE_THRESHHOLD,\n\t\t\t\t\t\t\t\tretry =\n\t\t\t\t\t\t\t\t\tstate.statusCode >= DEFAULTS.HTTP_ERROR_CODE_RETRY_THRESHHOLD &&\n\t\t\t\t\t\t\t\t\tstate.tries <= options.maxRetryCount,\n\t\t\t\t\t\t\t\tstatusCode = response.statusCode;\n\n\t\t\t\t\t\t\tif (json && statusCode !== HTTP_STATUS_CODES.NO_CONTENT && body.length) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t\tlet err = new Error('unable to parse JSON from response');\n\t\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// retry request when an error above the threshhold is received\n\t\t\t\t\t\t\tif (retry) {\n\t\t\t\t\t\t\t\t// emit retry event\n\t\t\t\t\t\t\t\tself.emit(EVENTS.retry, {\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// increment try count\n\t\t\t\t\t\t\t\tstate.tries += 1;\n\n\t\t\t\t\t\t\t\treturn clientRequest();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tlet err = new Error('HTTP error received');\n\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\t\t\t\t\t\t\t\terr.statusCode = statusCode;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn resolve(body);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tclient.on(EVENTS.error, (err) => {\n\t\t\t\t\tlet failover = (\n\t\t\t\t\t\tstate.failover.values.length &&\n\t\t\t\t\t\terr.code &&\n\t\t\t\t\t\tDEFAULTS.FAILOVER_ERROR_CODES.indexOf(err.code) !== -1);\n\n\t\t\t\t\t// check for failover\n\t\t\t\t\tif (failover) {\n\t\t\t\t\t\tstate.tries += 1;\n\t\t\t\t\t\tstate.failover.index = (\n\t\t\t\t\t\t\tstate.failover.index === state.failover.values.length - 1 ?\n\t\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t\tstate.failover.index + 1);\n\n\t\t\t\t\t\tif (state.tries <= state.failover.values.length) {\n\t\t\t\t\t\t\t// remove host and hostname from options to prevent conflict with prior request\n\t\t\t\t\t\t\tdelete options.hostname;\n\t\t\t\t\t\t\tdelete options.host;\n\n\t\t\t\t\t\t\toptions[state.failover.values[state.failover.index].key] =\n\t\t\t\t\t\t\t\tstate.failover.values[state.failover.index].value;\n\n\t\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// retry if below retry count threshhold\n\t\t\t\t\tif (state.tries <= options.maxRetryCount) {\n\t\t\t\t\t\tstate.tries += 1;\n\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reject(err);\n\t\t\t\t});\n\n\t\t\t\t// apply request timeout\n\t\t\t\tif (options.timeout) {\n\t\t\t\t\t// convert timeout to a number if provided as a string\n\t\t\t\t\tif (typeof options.timeout === 'string') {\n\t\t\t\t\t\toptions.timeout = parseInt(options.timeout, DEFAULTS.BASE_TEN);\n\t\t\t\t\t}\n\n\t\t\t\t\tclient.setTimeout(options.timeout, client.abort);\n\t\t\t\t}\n\n\t\t\t\t// send data\n\t\t\t\tif (state.data && (typeof state.data === 'string' || Buffer.isBuffer(state.data))) {\n\t\t\t\t\tclient.write(state.data);\n\t\t\t\t}\n\n\t\t\t\t// finish up the client stream and end to send\n\t\t\t\tclient.end();\n\t\t\t};\n\n\t\t\tclientRequest();\n\t\t});\n\n\t\t// return Promise for async/await or then/catch\n\t\tif (isEmpty(callback)) {\n\t\t\treturn executeRequest;\n\t\t}\n\n\t\t// execute and return results in callback\n\t\treturn executeRequest\n\t\t\t.then((result) => callback(null, result))\n\t\t\t.catch(callback);\n\t}\n\n\tgetOptions (options = {}) {\n\t\treturn mergeOptions(this, options);\n\t}\n\n\t// delete\n\tasync delete (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'DELETE';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// get\n\tasync get (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'GET';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// head\n\tasync head (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'HEAD';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// patch\n\tasync patch (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'PATCH';\n\t\treturn await this.call(options, data, callback);\n\t}\n\n\t// post\n\tasync post (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'POST';\n\t\treturn await this.call(options, data, callback);\n\t}\n\n\t// put\n\tasync put (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'PUT';\n\t\treturn await this.call(options, data, callback);\n\t}\n}\n\nclass Resource {\n\tconstructor (urlPattern, options) {\n\t\tif (isEmpty(urlPattern)) {\n\t\t\tthrow new Error('urlPattern argument is required');\n\t\t}\n\n\t\tthis.request = new Request(options);\n\t\tthis.urlParts = parseUrlPattern(urlPattern);\n\t}\n\n\tasync create (data, callback) {\n\t\tlet options = this.urlParts;\n\n\t\treturn await this.request.post(options, data, callback);\n\t}\n\n\tasync delete (...args) {\n\t\tlet\n\t\t\tcallback = args && typeof args[args.length - 1] === 'function' ?\n\t\t\t\targs[args.length - 1] :\n\t\t\t\tcallback,\n\t\t\toptions = this.urlParts;\n\n\t\t// TODO: map values based on urlParts.parameters\n\t\toptions.query = args;\n\n\t\treturn await this.request.delete(options, callback);\n\t}\n\n\tasync retrieve (...args) {\n\t\tlet\n\t\t\tcallback = args && typeof args[args.length - 1] === 'function' ?\n\t\t\t\targs[args.length - 1] :\n\t\t\t\tcallback,\n\t\t\toptions = this.urlParts;\n\n\t\t// TODO: map values based on urlParts.parameters\n\t\toptions.query = args;\n\n\t\treturn await this.request.get(options, callback);\n\t}\n\n\tasync update (data, callback) {\n\t\tlet options = this.urlParts;\n\n\t\treturn await this.request.put(options, data, callback);\n\t}\n}\n\nmodule.exports = { Request, Resource };"],"file":"index.js"}